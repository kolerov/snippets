# Copyright (C) 2024 Synopsys Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 3 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <http://www.gnu.org/licenses/>.

set nsim_bin "$env(NSIM_HOME)/bin/nsimdrv"

set_board_info sim_time_limit 300
if { $tool == "libstdc++" } {
    set_board_info sim_time_limit 1200
}

if ![info exists nsim_flags] {
    set nsim_flags {}
}

# Disable memory and instruction exceptions - execution will halt on error,
# instead of generating exception that may not be properly handled.

lappend nsim_flags \
    -on nsim_isa_enable_timer_0 \
    -on nsim_isa_enable_timer_1 \
    -off invalid_instruction_interrupt \
    -off memory_exception_interrupt \
    -on nsim_download_elf_sections

if { [string first "nsim.specs" $env(ARC_SPECS_FILE)] != -1 } {
    lappend nsim_flags -on nsim_emt
}

if [ string match arceb-* $target_triplet ] {
    lappend nsim_flags -on nsim_isa_big_endian
}

if { [arc_target_is_hs6x] } {
    lappend nsim_flags \
	-p nsim_isa_family=arc64     \
	-p nsim_isa_div_rem_option=2 \
	-p nsim_isa_mpy_option=9     \
	-p nsim_isa_mpy64=1	     \
	-p nsim_isa_div64_option=1   \
	-p nsim_isa_has_fp=1	     \
	-p nsim_isa_fp_vec_option=1  \
	-p nsim_isa_fp_hp_option=1   \
	-p nsim_isa_fp_dp_option=1   \
	-p nsim_isa_fp_div_option=1  \
	-p nsim_isa_fp_num_regs=32   \
	-p nsim_isa_unaligned_option=1
} elseif { [arc_target_is_hs5x] } {
    lappend nsim_flags		     \
	-p nsim_isa_family=av3hs     \
	-p nsim_isa_pc_size=32	     \
	-p nsim_isa_addr_size=32     \
	-p nsim_isa_swap_option=1    \
	-p nsim_isa_bitscan_option=1 \
	-p nsim_isa_div_rem_option=2 \
	-p nsim_isa_mpy_option=9     \
	-p nsim_isa_unaligned_option=1
} elseif { [arc_target_is_arc700] } {
    lappend nsim_flags \
	-p nsim_isa_family=a700 \
	-on nsim_isa_sat \
	-on nsim_isa_mpy32
} elseif { [arc_target_is_arc600] } {
    lappend nsim_flags \
	-p nsim_isa_family=a600 \
	-p nsim_isa_core=6 \
	-on nsim_isa_sat
} elseif { [arc_target_is_arc601] } {
    lappend nsim_flags \
	-p nsim_isa_family=a601 \
	-p nsim_isa_core=6 \
	-on nsim_isa_sat
} elseif { [arc_target_is_hs4x] } {
    lappend nsim_flags \
	-p nsim_isa_family=av2hs \
	-p nsim_isa_core=3 \
	-on nsim_isa_sat
    if { [regexp "__ARC_DSP__" [arc_dump_gcc_defines]] } {
	lappend nsim_flags \
	    -p nsim_isa_dsp_divsqrt_option=2 \
	    -p nsim_isa_dsp_wide_option=1
    }
} elseif { [arc_target_is_em] } {
    lappend nsim_flags \
	-p nsim_isa_family=av2em \
	-p nsim_isa_core=3 \
	-on nsim_isa_sat
} else {
    perror "Unknown CPU configuration"
}

set nsim_gcc_mapping {
    "__ARC64_ATOMIC_1__"	1	nsim_isa_atomic_option=1
    "__ARC64_ATOMIC_2__"	1	nsim_isa_atomic_option=2
    "__ARC64_ATOMIC_3__"	1	nsim_isa_atomic_option=3
    "__ARC64_LL64__"		1	nsim_isa_ll64_option=1
    "__ARC64_M128__"		1	nsim_isa_m128_option=1
    "__ARC64_WIDE_VECTOR__"	1	nsim_isa_fp_wide_option=1
    "__ARC_ATOMIC__"		1	nsim_isa_atomic_option=1
    "__ARC_BARREL_SHIFTER__"	0	nsim_isa_shift_option=0
    "__ARC_CODE_DENSITY__"	1	nsim_isa_code_density_option=2
    "__ARC_DIVREM__"		1	nsim_isa_div_rem_option=2
    "__ARC_FPU_ASSIST__ "	1	nsim_isa_fpuda_option=1
    "__ARC_FPU_DP__"		1	nsim_isa_fpud_option=1
    "__ARC_FPU_DP_DIV__"	1	nsim_isa_fpud_div_option=1
    "__ARC_FPU_DP_FMA__"	1	nsim_isa_fpu_mac_option=1
    "__ARC_FPU_SP__"		1	nsim_isa_fpus_option=1
    "__ARC_FPU_SP_DIV__"	1	nsim_isa_fpus_div_option=1
    "__ARC_FPU_SP_FMA__"	1	nsim_isa_fpu_mac_option=1
    "__ARC_FPX_SP__"		1	nsim_isa_spfp=fast
    "__ARC_FPX_DP__"		1	nsim_isa_dpfp=fast
    "__ARC_LL64__"		1	nsim_isa_ll64_option=1
    "__ARC_MPY_WLH1__"		1	nsim_isa_mpy_option=2
    "__ARC_MPY_WLH2__"		1	nsim_isa_mpy_option=3
    "__ARC_MPY_WLH3__"		1	nsim_isa_mpy_option=4
    "__ARC_MPY_WLH4__"		1	nsim_isa_mpy_option=5
    "__ARC_MPY_WLH5__"		1	nsim_isa_mpy_option=6
    "__ARC_MPY_DMPY__"		1	nsim_isa_mpy_option=7
    "__ARC_MPY_MACD__"		1	nsim_isa_mpy_option=8
    "__ARC_MPY_QMACW__"		1	nsim_isa_mpy_option=9
    "__ARC_MULT32__"		1	nsim_isa_mult32=1
    "__ARC_MUL32BY16__"		1	nsim_isa_mul32x16=1
    "__ARC_NORM__"		0	nsim_isa_bitscan_option=0
    "__ARC_RF16__"		1	nsim_isa_rgf_num_regs=16
    "__ARC_DSP__"		1	nsim_isa_dsp_option=3
}
    
foreach {gcc_define set_if_defined nsim_prop} $nsim_gcc_mapping {
    if { [regexp $gcc_define [arc_dump_gcc_defines]] == $set_if_defined } {
	lappend nsim_flags -p $nsim_prop
    }
}
